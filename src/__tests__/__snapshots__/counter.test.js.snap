// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Counter component renders with value 0 without intervalId 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div>
    Counter: 0
    <button
        className="plus-button"
        onClick={[Function]}
    >
        +
    </button>
    <button
        className="plus-1s-button"
        onClick={[Function]}
    >
        + every 1s
    </button>
    <button
        className="minus-button"
        onClick={[Function]}
    >
        -
    </button>
</div>,
  "nodes": Array [
    <div>
      Counter: 0
      <button
            className="plus-button"
            onClick={[Function]}
      >
            +
      </button>
      <button
            className="plus-1s-button"
            onClick={[Function]}
      >
            + every 1s
      </button>
      <button
            className="minus-button"
            onClick={[Function]}
      >
            -
      </button>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Counter
        counter={0}
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance":  {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "enqueueMethod": [Function],
        "handleMethod": [Function],
        "props": Object {
          "counter": 0,
        },
        "refs": Object {},
        "self": [Function],
        "state": Object {
          "reasonState": 0,
          "reasonStateVersion": 1,
          "reasonStateVersionUsedToComputeSubelements": 1,
        },
        "transitionNextTotalState": [Function],
        "updateMethod": [Function],
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div>
          Counter: 0
          <button
                    className="plus-button"
                    onClick={[Function]}
          >
                    +
          </button>
          <button
                    className="plus-1s-button"
                    onClick={[Function]}
          >
                    + every 1s
          </button>
          <button
                    className="minus-button"
                    onClick={[Function]}
          >
                    -
          </button>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div>
          Counter: 0
          <button
                    className="plus-button"
                    onClick={[Function]}
          >
                    +
          </button>
          <button
                    className="plus-1s-button"
                    onClick={[Function]}
          >
                    + every 1s
          </button>
          <button
                    className="minus-button"
                    onClick={[Function]}
          >
                    -
          </button>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Counter
    counter={0}
/>,
}
`;

exports[`Counter component renders with value 10 with intervalId 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div>
    Counter: 10
    <button
        className="plus-button"
        onClick={[Function]}
    >
        +
    </button>
    <button
        className="stop-plus-1s-button"
        onClick={[Function]}
    >
        stop +
    </button>
    <button
        className="minus-button"
        onClick={[Function]}
    >
        -
    </button>
</div>,
  "nodes": Array [
    <div>
      Counter: 10
      <button
            className="plus-button"
            onClick={[Function]}
      >
            +
      </button>
      <button
            className="stop-plus-1s-button"
            onClick={[Function]}
      >
            stop +
      </button>
      <button
            className="minus-button"
            onClick={[Function]}
      >
            -
      </button>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Counter
        counter={10}
        intervalId={1234}
/>,
      "_debugID": 5,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance":  {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "enqueueMethod": [Function],
        "handleMethod": [Function],
        "props": Object {
          "counter": 10,
          "intervalId": 1234,
        },
        "refs": Object {},
        "self": [Function],
        "state": Object {
          "reasonState": 0,
          "reasonStateVersion": 1,
          "reasonStateVersionUsedToComputeSubelements": 1,
        },
        "transitionNextTotalState": [Function],
        "updateMethod": [Function],
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 3,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div>
          Counter: 10
          <button
                    className="plus-button"
                    onClick={[Function]}
          >
                    +
          </button>
          <button
                    className="stop-plus-1s-button"
                    onClick={[Function]}
          >
                    stop +
          </button>
          <button
                    className="minus-button"
                    onClick={[Function]}
          >
                    -
          </button>
</div>,
        "_debugID": 6,
        "_renderedOutput": <div>
          Counter: 10
          <button
                    className="plus-button"
                    onClick={[Function]}
          >
                    +
          </button>
          <button
                    className="stop-plus-1s-button"
                    onClick={[Function]}
          >
                    stop +
          </button>
          <button
                    className="minus-button"
                    onClick={[Function]}
          >
                    -
          </button>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Counter
    counter={10}
    intervalId={1234}
/>,
}
`;

exports[`Counter component renders with value 10 without intervalId 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div>
    Counter: 10
    <button
        className="plus-button"
        onClick={[Function]}
    >
        +
    </button>
    <button
        className="plus-1s-button"
        onClick={[Function]}
    >
        + every 1s
    </button>
    <button
        className="minus-button"
        onClick={[Function]}
    >
        -
    </button>
</div>,
  "nodes": Array [
    <div>
      Counter: 10
      <button
            className="plus-button"
            onClick={[Function]}
      >
            +
      </button>
      <button
            className="plus-1s-button"
            onClick={[Function]}
      >
            + every 1s
      </button>
      <button
            className="minus-button"
            onClick={[Function]}
      >
            -
      </button>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Counter
        counter={10}
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance":  {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "enqueueMethod": [Function],
        "handleMethod": [Function],
        "props": Object {
          "counter": 10,
        },
        "refs": Object {},
        "self": [Function],
        "state": Object {
          "reasonState": 0,
          "reasonStateVersion": 1,
          "reasonStateVersionUsedToComputeSubelements": 1,
        },
        "transitionNextTotalState": [Function],
        "updateMethod": [Function],
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div>
          Counter: 10
          <button
                    className="plus-button"
                    onClick={[Function]}
          >
                    +
          </button>
          <button
                    className="plus-1s-button"
                    onClick={[Function]}
          >
                    + every 1s
          </button>
          <button
                    className="minus-button"
                    onClick={[Function]}
          >
                    -
          </button>
</div>,
        "_debugID": 4,
        "_renderedOutput": <div>
          Counter: 10
          <button
                    className="plus-button"
                    onClick={[Function]}
          >
                    +
          </button>
          <button
                    className="plus-1s-button"
                    onClick={[Function]}
          >
                    + every 1s
          </button>
          <button
                    className="minus-button"
                    onClick={[Function]}
          >
                    -
          </button>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Counter
    counter={10}
/>,
}
`;
